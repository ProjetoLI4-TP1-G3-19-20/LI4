{"ast":null,"code":"import axios from \"axios\";\nexport async function login(email, password) {\n  const url = \"http://localhost:8080\";\n  console.log(\"Sending request\");\n  const response = await axios.get(url, {\n    params: {\n      t: \"login\",\n      email: email,\n      pass: password\n    }\n  });\n  if (String(response.data) === \"true\") return true;else return false;\n}\nexport async function createUser(state) {\n  const url = \"http://localhost:8080\";\n  console.log(\"Sending request\");\n  fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      t: \"create\",\n      email: state.email,\n      password: state.password,\n      username: state.username,\n      phone: state.phone,\n      morada: state.morada,\n      postCode: state.postCode\n    }),\n    headers: new Headers()\n  }).then(response => {\n    if (!response.ok) {\n      return response.json().catch(() => {\n        // Couldn't parse the JSON\n        throw new Error(response.status);\n      }).then(({\n        message\n      }) => {\n        // Got valid JSON with error response, use it\n        throw new Error(message || response.status);\n      });\n    } // Successful response, parse the JSON and return the data\n\n\n    console.log(response.json());\n  });\n}","map":{"version":3,"sources":["F:/Main/Uni/LI4/Codigo/FrontEnd/src/HTTPRequests.js"],"names":["axios","login","email","password","url","console","log","response","get","params","t","pass","String","data","createUser","state","fetch","method","body","JSON","stringify","username","phone","morada","postCode","headers","Headers","then","ok","json","catch","Error","status","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,eAAeC,KAAf,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsC;AAC3C,QAAMC,GAAG,GAAG,uBAAZ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,QAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUJ,GAAV,EAAe;AACpCK,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE,OADG;AAENR,MAAAA,KAAK,EAAEA,KAFD;AAGNS,MAAAA,IAAI,EAAER;AAHA;AAD4B,GAAf,CAAvB;AAOA,MAAIS,MAAM,CAACL,QAAQ,CAACM,IAAV,CAAN,KAA0B,MAA9B,EAAsC,OAAO,IAAP,CAAtC,KACK,OAAO,KAAP;AACN;AAED,OAAO,eAAeC,UAAf,CAA0BC,KAA1B,EAAiC;AACtC,QAAMX,GAAG,GAAG,uBAAZ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEAU,EAAAA,KAAK,CAACZ,GAAD,EAAM;AACTa,IAAAA,MAAM,EAAE,MADC;AAETC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,MAAAA,CAAC,EAAE,QADgB;AAEnBR,MAAAA,KAAK,EAAEa,KAAK,CAACb,KAFM;AAGnBC,MAAAA,QAAQ,EAAEY,KAAK,CAACZ,QAHG;AAInBkB,MAAAA,QAAQ,EAAEN,KAAK,CAACM,QAJG;AAKnBC,MAAAA,KAAK,EAAEP,KAAK,CAACO,KALM;AAMnBC,MAAAA,MAAM,EAAER,KAAK,CAACQ,MANK;AAOnBC,MAAAA,QAAQ,EAAET,KAAK,CAACS;AAPG,KAAf,CAFG;AAWTC,IAAAA,OAAO,EAAE,IAAIC,OAAJ;AAXA,GAAN,CAAL,CAYGC,IAZH,CAYQpB,QAAQ,IAAI;AAClB,QAAI,CAACA,QAAQ,CAACqB,EAAd,EAAkB;AAChB,aAAOrB,QAAQ,CACZsB,IADI,GAEJC,KAFI,CAEE,MAAM;AACX;AACA,cAAM,IAAIC,KAAJ,CAAUxB,QAAQ,CAACyB,MAAnB,CAAN;AACD,OALI,EAMJL,IANI,CAMC,CAAC;AAAEM,QAAAA;AAAF,OAAD,KAAiB;AACrB;AACA,cAAM,IAAIF,KAAJ,CAAUE,OAAO,IAAI1B,QAAQ,CAACyB,MAA9B,CAAN;AACD,OATI,CAAP;AAUD,KAZiB,CAalB;;;AACA3B,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACsB,IAAT,EAAZ;AACD,GA3BD;AA4BD","sourcesContent":["import axios from \"axios\";\r\n\r\nexport async function login(email, password) {\r\n  const url = \"http://localhost:8080\";\r\n\r\n  console.log(\"Sending request\");\r\n  const response = await axios.get(url, {\r\n    params: {\r\n      t: \"login\",\r\n      email: email,\r\n      pass: password\r\n    }\r\n  });\r\n  if (String(response.data) === \"true\") return true;\r\n  else return false;\r\n}\r\n\r\nexport async function createUser(state) {\r\n  const url = \"http://localhost:8080\";\r\n\r\n  console.log(\"Sending request\");\r\n\r\n  fetch(url, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      t: \"create\",\r\n      email: state.email,\r\n      password: state.password,\r\n      username: state.username,\r\n      phone: state.phone,\r\n      morada: state.morada,\r\n      postCode: state.postCode\r\n    }),\r\n    headers: new Headers()\r\n  }).then(response => {\r\n    if (!response.ok) {\r\n      return response\r\n        .json()\r\n        .catch(() => {\r\n          // Couldn't parse the JSON\r\n          throw new Error(response.status);\r\n        })\r\n        .then(({ message }) => {\r\n          // Got valid JSON with error response, use it\r\n          throw new Error(message || response.status);\r\n        });\r\n    }\r\n    // Successful response, parse the JSON and return the data\r\n    console.log(response.json());\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}